{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","ATTRIB_NAME","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","codeblock","codeblockgh","linecontent","html","cases","@empty","@default","comment","tag","switchTo","$S2==style","$S2==script","$S3","embeddedStyle","embeddedScript"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMA,IASAC,EAAA,sBAOO,IAAAF,EAAA,CACPG,SAAA,CACAC,aAAA,sBAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,aAEAC,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAG,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,uCACAC,IAAA,IAAAD,OAAA,6CAIOb,EAAA,CACPe,aAAA,GACAC,aAAA,MAEAC,QAAA,yBACAC,WAAA,0BACAC,QAAA,iBAEAC,UAAA,8CAEAC,MAAA,iGACAC,UAAA,CACAC,KAAA,CACA,iDAAe,SAjEf,UACA,sBAiEA,oBAhEA,WAiEA,uBAhEA,kBAiEA,UAhEA,WAiEA,0BAhEA,WAiEA,uBAhEA,UAiEA,qCACAC,MAlEA,SAmEAC,KAAA,eAEA,oCACAD,MAtEA,SAuEAC,KAAA,eACAC,aAAA,OAEA,gBACAF,MA3EA,SA4EAC,KAAA,eAEA,CACAE,QAAA,iBAEAC,UAAA,iBACAJ,MAlFA,SAmFAC,KAAA,SACK,gBACLD,MArFA,SAsFAC,KAAA,SACK,OAtFL,oBAwFAI,YAAA,aACAL,MAzFA,kBA0FAC,KAAA,OACAC,aAAA,SACK,SA5FL,oBA6FAI,YAAA,CACA,SAAW,uCACX,qMACA,aAAe,sJACf,CACAH,QAAA,SAOAI,KAAA,CACA,aApGA,OAoGA,WACAC,MAAA,CACAC,SAAA,CACAT,MAvGA,MAwGAC,KAAA,WAEAS,WAAA,CACAV,MA3GA,MA4GAC,KAAA,cAGK,iBACLD,MAhHA,QAiHK,+BACLW,QAAA,wHAEAC,IAAA,yDAAAnC,EAzHA,iBAEA,cAuHA,CACAuB,MAxHA,cAyHAa,SAAA,eAzHA,gBA0HK,iCAAApC,EA5HL,iBAEA,cA0HK,CACLuB,MA3HA,cA4HAa,SAAA,eA5HA,gBA6HK,oCAAApC,EA/HL,iBAEA,gBA6HK,OAAAA,GAAA,OA1HL,MA0HK,cACL+B,MAAA,CACAM,aAAA,CACAd,MA7HA,MA8HAa,SAAA,gBACAX,aAAA,YAEAa,cAAA,CACAP,MAAA,CACAQ,IAAA,CACAhB,MApIA,MAqIAa,SAAA,iBACAX,aAAA,OAEAQ,WAAA,CACAV,MAzIA,MA0IAa,SAAA,iBACAX,aAAA,qBAIAQ,WAAA,CACAV,MAhJA,MAiJAC,KAAA,YAIAgB,cAAA,+BACAjB,MAAA,WACAC,KAAA,OACAC,aAAA,SACK,UACLgB,eAAA,gCACAlB,MAAA,WACAC,KAAA,OACAC,aAAA,SACK","file":"static/js/17.3832b170.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nvar TOKEN_HEADER_LEAD = 'keyword';\nvar TOKEN_HEADER = 'keyword';\nvar TOKEN_EXT_HEADER = 'keyword';\nvar TOKEN_SEPARATOR = 'meta.separator';\nvar TOKEN_QUOTE = 'comment';\nvar TOKEN_LIST = 'keyword';\nvar TOKEN_BLOCK = 'string';\nvar TOKEN_BLOCK_CODE = 'variable.source';\nvar DELIM_ASSIGN = 'delimiter.html';\nvar ATTRIB_NAME = 'attribute.name.html';\nvar ATTRIB_VALUE = 'string.html';\n\nfunction getTag(name) {\n  return 'tag';\n}\n\nexport var conf = {\n  comments: {\n    blockComment: ['<!--', '-->']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '(',\n    close: ')'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*<!--\\\\s*#?region\\\\b.*-->\"),\n      end: new RegExp(\"^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.md',\n  // escape codes\n  control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n  noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n  escapes: /\\\\(?:@control)/,\n  // escape codes for javascript/CSS strings\n  jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n  // non matched elements\n  empty: ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'],\n  tokenizer: {\n    root: [// headers (with #)\n    [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', TOKEN_HEADER_LEAD, TOKEN_HEADER, TOKEN_HEADER]], // headers (with =)\n    [/^\\s*(=+|\\-+)\\s*$/, TOKEN_EXT_HEADER], // headers (with ***)\n    [/^\\s*((\\*[ ]?)+)\\s*$/, TOKEN_SEPARATOR], // quote\n    [/^\\s*>+/, TOKEN_QUOTE], // list (starting with * or number)\n    [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, TOKEN_LIST], // code block (4 spaces indent)\n    [/^(\\t|[ ]{4})[^ ].*$/, TOKEN_BLOCK], // code block (3 tilde)\n    [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, {\n      token: TOKEN_BLOCK,\n      next: '@codeblock'\n    }], // github style code blocks (with backticks and language)\n    [/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, {\n      token: TOKEN_BLOCK,\n      next: '@codeblockgh',\n      nextEmbedded: '$1'\n    }], // github style code blocks (with backticks but no language)\n    [/^\\s*```\\s*$/, {\n      token: TOKEN_BLOCK,\n      next: '@codeblock'\n    }], // markup within lines\n    {\n      include: '@linecontent'\n    }],\n    codeblock: [[/^\\s*~~~\\s*$/, {\n      token: TOKEN_BLOCK,\n      next: '@pop'\n    }], [/^\\s*```\\s*$/, {\n      token: TOKEN_BLOCK,\n      next: '@pop'\n    }], [/.*$/, TOKEN_BLOCK_CODE]],\n    // github style code blocks\n    codeblockgh: [[/```\\s*$/, {\n      token: TOKEN_BLOCK_CODE,\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^`]+/, TOKEN_BLOCK_CODE]],\n    linecontent: [// escapes\n    [/&\\w+;/, 'string.escape'], [/@escapes/, 'escape'], // various markup\n    [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'], [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'], [/\\b_[^_]+_\\b/, 'emphasis'], [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'], [/`([^\\\\`]|@escapes)+`/, 'variable'], // links\n    [/\\{[^}]+\\}/, 'string.target'], [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']], [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'], // or html\n    {\n      include: 'html'\n    }],\n    // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n    // but currently there is a limitation in Monarch that prevents us from doing it: The opening\n    // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n    // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n    // we cannot correctly tokenize it in that mode yet.\n    html: [// html tags\n    [/<(\\w+)\\/>/, getTag('$1')], [/<(\\w+)/, {\n      cases: {\n        '@empty': {\n          token: getTag('$1'),\n          next: '@tag.$1'\n        },\n        '@default': {\n          token: getTag('$1'),\n          next: '@tag.$1'\n        }\n      }\n    }], [/<\\/(\\w+)\\s*>/, {\n      token: getTag('$1')\n    }], [/<!--/, 'comment', '@comment']],\n    comment: [[/[^<\\-]+/, 'comment.content'], [/-->/, 'comment', '@pop'], [/<!--/, 'comment.content.invalid'], [/[<\\-]/, 'comment.content']],\n    // Almost full HTML tag matching, complete with embedded scripts & styles\n    tag: [[/[ \\t\\r\\n]+/, 'white'], [/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [ATTRIB_NAME, DELIM_ASSIGN, ATTRIB_VALUE, {\n      token: ATTRIB_VALUE,\n      switchTo: '@tag.$S2.$4'\n    }, ATTRIB_VALUE]], [/(type)(\\s*=\\s*)(')([^']+)(')/, [ATTRIB_NAME, DELIM_ASSIGN, ATTRIB_VALUE, {\n      token: ATTRIB_VALUE,\n      switchTo: '@tag.$S2.$4'\n    }, ATTRIB_VALUE]], [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [ATTRIB_NAME, DELIM_ASSIGN, ATTRIB_VALUE]], [/\\w+/, ATTRIB_NAME], [/\\/>/, getTag('$S2'), '@pop'], [/>/, {\n      cases: {\n        '$S2==style': {\n          token: getTag('$S2'),\n          switchTo: 'embeddedStyle',\n          nextEmbedded: 'text/css'\n        },\n        '$S2==script': {\n          cases: {\n            '$S3': {\n              token: getTag('$S2'),\n              switchTo: 'embeddedScript',\n              nextEmbedded: '$S3'\n            },\n            '@default': {\n              token: getTag('$S2'),\n              switchTo: 'embeddedScript',\n              nextEmbedded: 'text/javascript'\n            }\n          }\n        },\n        '@default': {\n          token: getTag('$S2'),\n          next: '@pop'\n        }\n      }\n    }]],\n    embeddedStyle: [[/[^<]+/, ''], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/</, '']],\n    embeddedScript: [[/[^<]+/, ''], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/</, '']]\n  }\n};"],"sourceRoot":""}