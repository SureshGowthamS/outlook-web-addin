{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/clojure/clojure.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","ignoreCase","tokenPostfix","token","keywords","constants","operators","tokenizer","root","cases","@keywords","@constants","@operators","@default","include","whitespace","strings","multiLineString"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,MAEAC,SAAA,gBAA4B,KAAK,WACjCC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,OAGON,EAAA,CACPQ,aAAA,GACAC,YAAA,EACAC,aAAA,OACAP,SAAA,EACAE,KAAA,IACAC,MAAA,IACAK,MAAA,yBACG,CACHN,KAAA,IACAC,MAAA,IACAK,MAAA,mBACG,CACHN,KAAA,IACAC,MAAA,IACAK,MAAA,qBAEAC,SAAA,y9BACAC,UAAA,uBACAC,UAAA,qHACAC,UAAA,CACAC,KAAA,8QACAC,MAAA,CACAC,YAAA,UACAC,aAAA,WACAC,aAAA,YACAC,WAAA,gBAEK,6CACLC,QAAA,eACK,CACLA,QAAA,aAEAC,WAAA,iCAA8C,YAC9CC,QAAA,mEACAC,gBAAA","file":"static/js/45.29e8a4c4.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: ';;'\n  },\n  brackets: [['(', ')'], ['{', '}'], ['[', ']']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  ignoreCase: true,\n  tokenPostfix: '.clj',\n  brackets: [{\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }],\n  keywords: ['ns', 'ns-unmap', 'create-ns', 'in-ns', 'fn', 'def', 'defn', 'defmacro', 'defmulti', 'defonce', 'require', 'import', 'new', 'refer', 'pos', 'pos?', 'filter', 'map', 'reduce', 'repeat', 'key', 'rest', 'concat', 'into', 'reverse', 'iterate', 'range', 'drop', 'drop-while', 'take', 'take-while', 'neg', 'neg?', 'bound-fn', 'if', 'if-not', 'if-let', 'case,', 'contains', 'conj', 'disj', 'sort', 'get', 'assoc', 'merge', 'keys', 'vals', 'nth', 'first', 'last', 'count', 'contains?', 'cond', 'condp', 'cond->', 'cond->>', 'when', 'while', 'when-not', 'when-let', 'when-first', 'do', 'future', 'comment', 'doto', 'locking', 'proxy', 'println', 'type', 'meta', 'var', 'as->', 'reify', 'deftype', 'defrecord', 'defprotocol', 'extend', 'extend-protocol', 'extend-type', 'specify', 'specify!', 'try', 'catch', 'finally', 'let', 'letfn', 'binding', 'loop', 'for', 'seq', 'doseq', 'dotimes', 'when-let', 'if-let', 'when-some', 'if-some', 'this-as', 'defmethod', 'testing', 'deftest', 'are', 'use-fixtures', 'use', 'remove', 'run', 'run*', 'fresh', 'alt!', 'alt!!', 'go', 'go-loop', 'thread', 'boolean', 'str'],\n  constants: ['true', 'false', 'nil'],\n  operators: ['=', 'not=', '<', '<=', '>', '>=', 'and', 'or', 'not', 'inc', 'dec', 'max', 'min', 'rem', 'bit-and', 'bit-or', 'bit-xor', 'bit-not'],\n  tokenizer: {\n    root: [[/0[xX][0-9a-fA-F]+/, 'number.hex'], [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'], [/(?:\\b(?:(ns|def|defn|defn-|defmacro|defmulti|defonce|ns|ns-unmap|fn))(?![\\w-]))(\\s+)((?:\\w|\\-|\\!|\\?)*)/, ['keyword', 'white', 'variable']], [/[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@constants': 'constant',\n        '@operators': 'operators',\n        '@default': 'identifier'\n      }\n    }], [/\\/#\"(?:\\.|(?:\\\")|[^\"\"\\n])*\"\\/g/, 'regexp'], {\n      include: '@whitespace'\n    }, {\n      include: '@strings'\n    }],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/;;.*$/, 'comment']],\n    strings: [[/\"$/, 'string', '@popall'], [/\"(?=.)/, 'string', '@multiLineString']],\n    multiLineString: [[/\\\\./, 'string.escape'], [/\"/, 'string', '@popall'], [/.(?=.*\")/, 'string'], [/.*\\\\$/, 'string'], [/.*$/, 'string', '@popall']]\n  }\n};"],"sourceRoot":""}